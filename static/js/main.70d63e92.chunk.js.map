{"version":3,"sources":["firebase.js","context.js","components/Product.js","components/ProductsList.js","components/ComparedProduct.js","components/Compare.js","components/App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","AppContext","React","createContext","AppProvider","children","useState","products","setProducts","productCollection","collection","documentsCollection","doc","id","data","useEffect","subscribe","onSnapshot","snapshot","dataFromCollection","docs","map","toCompare","setCompare","contextValue","addToCompare","product","length","removeFromCompare","removedProduct","filter","Provider","value","Product","name","img","description","price","Consumer","productsToCompare","item","thumbClass","removeBtn","data-testid","onClick","className","type","addBtn","src","process","alt","ProductsList","key","ComparedProduct","colors","fresh","renderColors","color","style","backgroundColor","freshClass","renderCondition","Compare","transform","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.70d63e92.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyBBmE1GxqFMEn0uDEMye9-uBdwE4t31X4g',\n  authDomain: 'react-compare-products.firebaseapp.com',\n  databaseURL: 'https://react-compare-products.firebaseio.com',\n  projectId: 'react-compare-products',\n  storageBucket: 'react-compare-products.appspot.com',\n  messagingSenderId: '388380689401',\n  appId: '1:388380689401:web:d27939ab4b47381fa03328',\n  measurementId: 'G-E0SR2DCMZB',\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const firestore = firebase.firestore();\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { firestore } from './firebase';\n\nexport const AppContext = React.createContext();\n\nexport const AppProvider = ({ children }) => {\n  const [products, setProducts] = useState([]);\n\n  const productCollection = firestore.collection('products');\n  const documentsCollection = (doc) => {\n    return { id: doc.id, ...doc.data() };\n  };\n\n  useEffect(() => {\n    const subscribe = productCollection.onSnapshot((snapshot) => {\n      const dataFromCollection = snapshot.docs.map(documentsCollection);\n      setProducts(dataFromCollection);\n    });\n    return () => subscribe;\n  }, []);\n\n  const [toCompare, setCompare] = useState([]);\n\n  const handleAddToCompare = (product) => {\n    if (toCompare.length < 4) {\n      setCompare([...toCompare, product]);\n    }\n  };\n\n  const handleRemoveFromCompare = (id) => {\n    const removedProduct = toCompare.filter((product) => product.id !== id);\n    setCompare(removedProduct);\n  };\n\n  const contextValue = {\n    toCompare,\n    addToCompare: handleAddToCompare,\n    removeFromCompare: handleRemoveFromCompare,\n    data: products,\n  };\n\n  AppProvider.propTypes = {\n    children: PropTypes.element.isRequired,\n  };\n\n  return <AppContext.Provider value={contextValue}>{children}</AppContext.Provider>;\n};\n","import React from 'react';\n// import LazyLoad from 'react-lazyload';\nimport PropTypes from 'prop-types';\nimport { AppContext } from '../context';\n\nconst Product = ({ product }) => {\n  const { id, name, img, description, price } = product;\n\n  return (\n    <AppContext.Consumer>\n      {({ toCompare, addToCompare, removeFromCompare }) => {\n        const productsToCompare = toCompare.filter((item) => item.id === id);\n        const thumbClass = productsToCompare.length !== 0 && 'product__thumb--compare-remove';\n        const removeBtn = (\n          <button\n            data-testid=\"remove-btn\"\n            onClick={() => removeFromCompare(id)}\n            className=\"product__compare-btn product__compare-btn--remove\"\n            type=\"button\"\n          >\n            Usuń\n          </button>\n        );\n        const addBtn = (\n          <button\n            data-testid=\"compare-btn\"\n            onClick={() => addToCompare(product)}\n            className=\"product__compare-btn\"\n            type=\"button\"\n          >\n            Prównaj\n          </button>\n        );\n\n        return (\n          <div data-testid=\"product\" className=\"col-sm-6 col-lg-4 col-xl-3\">\n            <div className=\"product\">\n              <div className={`product__thumb ${thumbClass}`}>\n                <img src={process.env.PUBLIC_URL + img} alt={name} className=\"product__img\" />\n                {productsToCompare.length !== 0 ? removeBtn : addBtn}\n              </div>\n              <div className=\"product__text\">\n                <h3 className=\"product__title\">{name}</h3>\n                <p className=\"product__short-description\">{description}</p>\n                <span className=\"product__price\">{price} zł</span>\n              </div>\n            </div>\n          </div>\n        );\n      }}\n    </AppContext.Consumer>\n  );\n};\n\nProduct.propTypes = {\n  product: PropTypes.shape().isRequired,\n};\n\nexport default Product;\n","import React from 'react';\nimport { AppContext } from '../context';\nimport Product from './Product';\n\nconst ProductsList = () => {\n  return (\n    <AppContext.Consumer>\n      {({ data }) => {\n        const products = data.map((product) => <Product key={product.id} product={product} />);\n        return (\n          <div data-testid=\"productsList\" className=\"products row mt-5 mb-5\">\n            {products}\n          </div>\n        );\n      }}\n    </AppContext.Consumer>\n  );\n};\n\nexport default ProductsList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ComparedProduct = ({ product }) => {\n  const { name, img, price, colors, fresh } = product;\n  const renderColors = colors.map((color) => (\n    <div key={color} className=\"compare__single-color\" style={{ backgroundColor: color }} />\n  ));\n\n  const freshClass = fresh\n    ? 'compare__param compare__param-condition compare__param-condition--fresh'\n    : 'compare__param compare__param-condition compare__param-condition--frozen';\n  const renderCondition = fresh ? 'Świerze' : 'Mrożone';\n\n  return (\n    <>\n      <ul className=\"compare__row\">\n        <li className=\"compare__param compare__param--name\">\n          <img src={process.env.PUBLIC_URL + img} alt=\"\" className=\"compare__img\" />\n          <span className=\"compare__text\">{name}</span>\n        </li>\n        <li className=\"compare__param compare__param--price\">{price} zł</li>\n        <li className=\"compare__param compare__param--color\">{renderColors}</li>\n        <li className={freshClass}>{renderCondition}</li>\n      </ul>\n    </>\n  );\n};\n\nComparedProduct.propTypes = {\n  product: PropTypes.shape().isRequired,\n};\n\nexport default ComparedProduct;\n","import React from 'react';\nimport { AppContext } from '../context';\nimport ComparedProduct from './ComparedProduct';\n\nconst Compare = () => {\n  return (\n    <AppContext.Consumer>\n      {({ toCompare }) => {\n        if (toCompare.length >= 2) {\n          const productsToCompare = toCompare.map((product) => (\n            <ComparedProduct key={product.id} product={product} />\n          ));\n          return (\n            <div\n              className=\"compare\"\n              data-testid=\"compare\"\n              style={{ transform: `translate(-50%, calc(100% - ${74 * (toCompare.length + 1)}px)` }}\n            >\n              <ul className=\"compare__row\">\n                <li className=\"compare__param compare__param--head\">Produkt</li>\n                <li className=\"compare__param compare__param--head\">Cena</li>\n                <li className=\"compare__param compare__param--head\">Kolory</li>\n                <li className=\"compare__param compare__param--head\">Stan</li>\n              </ul>\n              {productsToCompare}\n            </div>\n          );\n        }\n        return null;\n      }}\n    </AppContext.Consumer>\n  );\n};\n\nexport default Compare;\n","import React from 'react';\nimport { AppProvider } from '../context';\nimport './App.sass';\nimport ProductsList from './ProductsList';\nimport Compare from './Compare';\n\nconst App = () => {\n  return (\n    <AppProvider>\n      <div className=\"product-list-page container mt-5\">\n        <h1>React comapre products</h1>\n        <ProductsList />\n        <Compare />\n      </div>\n    </AppProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}